---
description: 
globs: 
alwaysApply: true
---
# Flex Online Compiler - Project Layout Documentation

**Last Updated:** 2025-06-27 04:07:58  
**Total Files:** 44  
**Total Directories:** 14  

## Project Overview

This is a **Flex Online Compiler** - a web-based IDE and execution environment for the Flex programming language. The platform provides real-time code compilation, execution, and interactive I/O capabilities through a modern web interface.

## Complete Directory Structure

```
.
├── .cursor
│   └── rules
│       └── layout.mdc                 # This documentation file
├── .env                              # Environment variables
├── .env.example                      # Environment variables template
├── .gitignore                         # Git ignore patterns
├── backend/                           # Node.js Backend Services
│   ├── .gitignore                    # Backend-specific ignores
│   ├── bun.lock                      # Bun package lock file
│   ├── config/                       # Configuration modules
│   │   ├── constants.js              # Application constants
│   │   └── logger.js                 # Logging configuration
│   ├── controllers/                  # Request handlers
│   │   ├── contentController.js      # Content management
│   │   └── executionController.js    # Code execution handling
│   ├── direct-server.js              # Direct server implementation
│   ├── flex_patch.js                 # Flex language patches/extensions
│   ├── jsconfig.json                 # JavaScript configuration
│   ├── middleware/                   # Express middleware
│   │   ├── cors.js                   # CORS configuration
│   │   └── security.js               # Security middleware
│   ├── package-lock.json             # NPM lock file
│   ├── package.json                  # NPM dependencies and scripts
│   ├── routes/                       # API routing
│   │   ├── api.js                    # Main API routes
│   │   └── webhook.js                # Webhook endpoints
│   ├── server.js                     # Main server entry point
│   ├── server_init.lx                # Flex server initialization
│   ├── server_old.js                 # Legacy server (backup)
│   ├── services/                     # Business logic services
│   │   ├── executionManager.js       # Manages code execution
│   │   ├── flexExecutor.js           # Flex language interpreter
│   │   └── websocketManager.js       # WebSocket connections
│   ├── start.js                      # Server startup script
│   └── utils/                        # Utility functions
│       └── helpers.js                # Helper utilities
├── deploy-webhook.sh                 # Webhook deployment script
├── deploy.sh                         # Main deployment script
├── docs/                             # Documentation directory
├── ecosystem-loadbalanced.config.js  # PM2 load-balanced config
├── ecosystem.config.js               # PM2 process config
├── frontend/                         # Web Frontend
│   ├── css/                          # Stylesheets
│   │   ├── style.css                 # Main styles
│   │   └── styles.css                # Additional styles
│   ├── examples/                     # Sample Flex code
│   │   └── input_demo.lx             # Interactive input demo
│   ├── index.html                    # Main web interface
│   ├── js/                           # Frontend JavaScript
│   │   ├── flex-mode.js              # Flex syntax highlighting
│   │   └── main.js                   # Main frontend logic
│   └── test_functionality.html       # Testing interface
├── manage-loadbalanced.sh            # Load-balanced management
├── manage.sh                         # Process management script
├── monitor.sh                        # System monitoring
├── nginx-flex-lb.conf                # Nginx load balancer config
├── package-lock.json                 # Root NPM lock file
├── start-flex-web.sh                 # Web platform startup
└── test-domain.sh                    # Domain testing script
```

## Architecture Components

### Backend Services (Node.js/Express)
- **Main Server**: `server.js` - Express application with WebSocket support
- **Execution Engine**: `flexExecutor.js` - Compiles and runs Flex code
- **WebSocket Manager**: Real-time communication for interactive programs
- **Content Controller**: Manages code storage and retrieval
- **Security Layer**: CORS and security middleware

### Frontend Interface
- **Web IDE**: Modern browser-based code editor
- **Syntax Highlighting**: Custom Flex language mode (`flex-mode.js`)
- **Real-time Execution**: WebSocket-based code execution
- **Interactive I/O**: Support for user input during program execution

### Infrastructure & Deployment
- **Process Management**: PM2 with load balancing support
- **Load Balancer**: Nginx configuration for scaling
- **Monitoring**: Health checks and system monitoring
- **CI/CD**: Automated deployment via webhooks

### Flex Language Support
- **File Extension**: `.lx` files for Flex source code
- **Server Integration**: `server_init.lx` for Flex runtime setup
- **Language Patches**: `flex_patch.js` for extensions/modifications
- **Examples**: Sample programs demonstrating language features

## Technology Stack & Frameworks

### **Backend Technologies**
- **Runtime**: Node.js (>=18.0.0) with Bun (>=1.0.0) support
- **Web Framework**: Express.js 4.21.2
- **Real-time Communication**: WebSocket (ws 8.16.0)
- **Process Manager**: PM2 5.4.3 with cluster/load-balancing
- **Security**: Helmet 8.0.0, CORS 2.8.5, XSS-clean 0.1.4
- **Rate Limiting**: Express-rate-limit 7.5.0
- **Logging**: Winston 3.17.0
- **Environment**: dotenv 16.4.7
- **Language Execution**: Python-shell 5.0.0 (Flex interpreter bridge)
- **Utilities**: UUID 9.0.1, Body-parser 1.20.3

### **Frontend Technologies**
- **UI Framework**: Bootstrap 5.3.0 (CSS framework)
- **Icons**: Bootstrap Icons 1.10.0
- **Code Editor**: CodeMirror 5.65.3 with custom Flex syntax highlighting
- **Theme**: Dracula theme for code editor
- **Markdown**: Marked.js 4.3.0 (documentation rendering)
- **Architecture**: Vanilla JavaScript (no frontend framework)

### **Infrastructure & Deployment**
- **Web Server**: Nginx (production load balancer)
- **Process Manager**: PM2 ecosystem with load balancing
- **Package Managers**: NPM + Bun for performance
- **Deployment**: Shell scripts with webhook automation
- **Monitoring**: Custom health monitoring scripts

### **Development Tools**
- **Development Server**: Nodemon 3.0.3
- **HTTP Client**: Axios 1.8.1
- **Type Support**: TypeScript 5+ (peer dependency)
- **Configuration**: jsconfig.json for JavaScript IntelliSense

## Key Features

1. **Online IDE**: Web-based code editor with syntax highlighting
2. **Real-time Execution**: Immediate code compilation and execution
3. **Interactive Programs**: Support for user input via WebSocket
4. **Load Balancing**: Production-ready scaling capabilities
5. **Monitoring**: Comprehensive system health monitoring
6. **Auto-deployment**: Webhook-based continuous deployment

## Development Workflow

1. **Code Editing**: Frontend web interface with Flex syntax highlighting
2. **Execution Request**: WebSocket communication to backend
3. **Compilation**: Flex code processed by execution engine
4. **Real-time Output**: Results streamed back to frontend
5. **Interactive I/O**: Bidirectional communication for user input

## Flex Programming Language Documentation

> **Reference**: [Flex Language Documentation](mdc:https:/deepwiki.com/Flex-Language/Flex)

### **Language Overview**
Flex is a modern programming language designed for simplicity and performance. This online compiler provides a complete development environment with real-time execution and interactive capabilities.

### **File Extension**
- **Source Files**: `.lx` (Flex source code)
- **Example**: `program.lx`, `server_init.lx`

### **Basic Syntax & Features**
Based on the codebase examples and implementation:

```flex
// Variable Declaration
rakm x = 10          // Integer variable
y = 20               // Type inference
name = "Flex"        // String variable

// String Interpolation
print("Sum of {x} and {y} is {x + y}")

// Control Structures
for (i = 0; i < 5; i++) {
    print("Iteration: {i}")
}

// Interactive Input
input = scan()       // Read user input (via WebSocket)
print("You entered: {input}")
```

### **Language Features**
1. **Type Inference**: Automatic type detection
2. **String Interpolation**: `{variable}` syntax in strings
3. **Interactive I/O**: `scan()` function for user input
4. **Modern Syntax**: C-style control structures
5. **Real-time Execution**: Compiled and executed in web environment

### **Compiler Architecture**
- **Interpreter**: Python-based Flex interpreter (`python-shell`)
- **Runtime**: Server-side execution with WebSocket communication
- **Input Handling**: Real-time input via WebSocket (`scan()` function)
- **Output Streaming**: Live output updates during execution

### **Interactive Features**
- **Real-time Input**: Programs can request user input via `scan()`
- **Live Output**: Results streamed to web interface
- **WebSocket Communication**: Bidirectional program interaction
- **Input Queue**: Multiple inputs can be queued in advance

### **Development Environment**
- **Syntax Highlighting**: Custom CodeMirror mode for Flex
- **Code Editor**: Full-featured web IDE with Dracula theme
- **Examples**: Built-in sample programs
- **Documentation**: Integrated help and reference materials

### **Execution Model**
1. **Code Submission**: User writes Flex code in web editor
2. **WebSocket Connection**: Real-time communication established
3. **Server Processing**: Code sent to backend execution engine
4. **Interpretation**: Python-shell executes Flex interpreter
5. **Interactive Loop**: Handle `scan()` input requests via WebSocket
6. **Output Streaming**: Results sent back to frontend in real-time

## Change Log

| Date | Change Type | Files Affected | Description |
|------|-------------|----------------|-------------|
| 2025-06-27 04:07:58 | Creation | All files | Initial project structure documented |
| 2025-06-27 04:07:58 | Enhancement | layout.mdc | Added comprehensive framework documentation and Flex language reference |

---

**Note**: This file should be updated whenever:
- Files are added, removed, or renamed
- New features are implemented
- Architecture changes are made
- Dependencies are updated
- Framework versions are upgraded
- Flex language features are added/modified

**Maintenance**: Keep this documentation current to ensure accurate project understanding.
